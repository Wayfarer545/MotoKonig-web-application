stages:
  - lint
  - test
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: tcp://docker:2375/
  AUTO_DEVOPS_PLATFORM_TARGET: EC2
  UV_CACHE_DIR: "$CI_PROJECT_DIR/.uv-cache"

cache:
  paths:
    - .uv-cache/
    - uv.lock

# Линтинг
lint:
  stage: lint
  image: python:3.12-slim
  rules:
    - changes:
        - "app/**/*"
        - "migrations/**/*"
        - "tests/**/*"
        - "pyproject.toml"
        - "docker/**/*"
  script:
    - pip install --no-cache-dir uv ruff
    - ruff check app/
  allow_failure: true

test:
  stage: test
  image: python:3.12-slim
  rules:
    - changes:
        - "app/**/*"
        - "tests/**/*"
        - "migrations/**/*"
        - "pyproject.toml"
        - "docker/**/*"
  script:
    - pip install --no-cache-dir uv
    - uv pip install -e ".[dev]"
    - pytest tests/ -v --cov=app --cov-report=xml
  artifacts:
    paths:
      - coverage.xml
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  allow_failure: true

# Сборка образа
build:
  stage: build
  image: docker:24-dind
  services:
    - docker:24-dind
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_TAG =~ /^v(?:\d+.){2}(?:\d+)-release$/
  script:
    - echo "Building API image.."
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker build -t "$CI_REGISTRY_IMAGE:latest" -f docker/Dockerfile .
    - docker push "$CI_REGISTRY_IMAGE:latest"
    - echo "Building complete."

# Деплой
deploy:
  stage: deploy
  image: alpine:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_TAG =~ /^v(?:\d+.){2}(?:\d+)-release$/
  before_script:
    # Установим ssh-agent, rsync, docker-cli если надо
    - apk add --no-cache openssh-client rsync
    # Добавим ключ для ssh
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    # Отключим host checking (можно убрать для продакшена)
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - >
      ssh -o StrictHostKeyChecking=no ec2-user@ec2-3-71-173-220.eu-central-1.compute.amazonaws.com \
      "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    # Загружаем compose-файл на сервер
    - rsync -avz docker/compose.yml ec2-user@ec2-3-71-173-220.eu-central-1.compute.amazonaws.com:~/compose.yml
    # Обновляем контейнер при помощи docker compose
    - >
      ssh ec2-user@ec2-3-71-173-220.eu-central-1.compute.amazonaws.com \
      "
      export CI_COMMIT_TAG=${CI_COMMIT_TAG} && \
      docker-compose -f ~/compose.yml up -d --no-deps backend --force-recreate"