stages:
  - lint
  - test
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: tcp://docker:2375/
  AUTO_DEVOPS_PLATFORM_TARGET: "EC2"
  UV_CACHE_DIR: "$CI_PROJECT_DIR/.uv-cache"

cache:
  paths:
    - .uv-cache/
    - uv.lock

# Линтинг
lint:
  stage: lint
  image: python:3.12-slim
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(main|dev)$/'
      changes:
        - "app/**/*"
        - "migrations/**/*"
        - "tests/**/*"
        - "pyproject.toml"
        - "docker/**/*"
        - ".gitlab-ci.yml"
  script:
    - pip install --no-cache-dir uv ruff
    - ruff check app/
  allow_failure: true

# Тестирование
test:
  stage: test
  image: python:3.12-slim
  before_script:
    # Устанавливаем системные зависимости
    - apt-get update && apt-get install -y gcc g++ build-essential
    - pip install --no-cache-dir uv
  script:
    - uv sync --dev
    - uv run pytest tests/ -v --cov=app --cov-report=xml --cov-report=term
  artifacts:
    reports:
      coverage: coverage.xml
    paths:
      - coverage.xml
      - htmlcov/
    expire_in: 1 week
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  allow_failure: true

# Сборка образа
build:
  stage: build
  image: docker:24-dind
  services:
    - docker:24-dind
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v(?:\d+\.){2}\d+-release$/'
  script:
    - echo "Building API image.."
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker build -t "$CI_REGISTRY_IMAGE:latest" -f docker/Dockerfile .
    - docker push "$CI_REGISTRY_IMAGE:latest"
    - echo "Building complete."

# Деплой
deploy:
  stage: deploy
  image: alpine:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_TAG =~ /^v(?:\d+.){2}(?:\d+)-release$/
  before_script:
    - apk add --no-cache openssh rsync
    # Разворачиваем приватный ключ в файл
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan ec2-3-71-173-220.eu-central-1.compute.amazonaws.com >> ~/.ssh/known_hosts
  script:
    - |
      ssh -tt ec2-user@ec2-3-71-173-220.eu-central-1.compute.amazonaws.com <<'EOF'
        cd /home/ec2-user/motokonig
        git pull origin main
        docker-compose pull
        docker-compose down
        docker-compose up -d
        sleep 5
        docker-compose exec -T backend alembic upgrade head
      EOF